function focus_factor=Post_precess_TorqRatio(torqueDir, fileBaseName, seriersNo,  EMGchannel)
% Post_precess('BH', 'abd', [0:99], 50);
% Post_precess_new('F:\data\torque\JWpost\abdef', 'abd', [0:119], 35);
addpath('C:\Documents and Settings\Jun Yao\Matlab\EMG\EMGFocus');
yjplot=0;
TIMETRIALSTART=-2000;
TIMETRIALEND=500;
MatrixRow=TIMETRIALEND-TIMETRIALSTART+1;
preLen=2000;
coef=0.75;
% torqueDir='F:\data\torque\EBpre\abdef2';% torqueDir='C:\Documents and Settings\Jun Yao\Subject\'; 
maxFile=[torqueDir,'\Max.dat'];
torqueFile=[torqueDir,'\',fileBaseName(1:end),'wh'];
load (torqueFile);
torqueDir75_45_90=load ('C:\Documents and Settings\Jun Yao\Matlab\EMG\EMGFocus\torqueDir75_45_90.mat');
load ('C:\Documents and Settings\Jun Yao\Matlab\EMG\EMGFocus\PCSA.mat');

% EMGchannel=[1:10]; %for all stroke subjects Jun runed and WS NT DW NR
% EMGchannel=[1:3,13,5:10]; %for all stroke subjects and BH BS, except WS NT DW NR 
% EMGchannel=[1:3,6:10,12,15]; % for Dan
% EMGchannel=[1:3,5:10,12]; % for MLM, LZ, JD, TK



gainfilename=[torqueDir,'\FiltSetup'];
load (gainfilename)
filterGain=filters.gain(EMGchannel);

%loading the EMG_max and Torq_max
fid=fopen(maxFile);
tline=fgetl(fid);
yj_command=['EMG_max=[',tline,'];'];
eval(yj_command)
EMG_max=EMG_max(EMGchannel);

tline=fgetl(fid);
yj_command=['Torq_max=[',tline,'];'];
eval(yj_command)

fclose(fid);
% deletedRec=[];
deletedRec=deletedRec-1; % Now the deletedRec is the trial code put in the end of the file nume. While the saved deletedRec in the torque file is the trial number counting from 1.

outputfile_TL = [torqueDir,'\Tlevel_',fileBaseName,'.dat'];
outputfile_TR = [torqueDir,'\Trate_',fileBaseName,'.dat'];
outputfile_EMGL = [torqueDir,'\EMGlevel_',fileBaseName,'.dat'];
outputfile_EMGm = [torqueDir,'\HighFEMG_',fileBaseName];
outputfile_MSI = [torqueDir,'\MSI_',fileBaseName,'.dat'];
subinfo_File = [torqueDir,'\sub.inf'];

[Name,Larm,Lfore,Abd_angle,Elb_angle,zoffset,arm]=read_sub_inf(subinfo_File);
handles.subName=Name;
handles.Larm=Larm;
handles.Lfore=Lfore;
handles.Abd_angle=Abd_angle;
handles.Elb_angle=Elb_angle;
handles.arm=arm;
handles.zoffset=zoffset;

[B,A]=butter(6,1.5/500);
[B_EMG,A_EMG]=butter(6,35/500);

k=1;
for i=1:length(seriersNo)
    cur_trial=seriersNo(i)
    ind=find(deletedRec==cur_trial);
    if isempty(ind)
        cur_EMGfile=[torqueDir,'\',fileBaseName,num2str(cur_trial),'.daq'];

        data=daqread(cur_EMGfile);
	
        FM=data(:,1:6);
        [m,n]=size(FM);
        FM=FM-(diag(mean(FM(1:coef*preLen,:)))*ones(n,m))';
	
        FM=JR3toFM(FM,handles);
        Force=FM(:,1:3);
        FM=FM(:,4:7);
        [m,n]=size(FM);
        FM=FM-(diag(mean(FM(1:coef*preLen,:)))*ones(n,m))';
	
        TTL=data(:,end);

%         EMG=data(:,7:12+7-1); 
        EMG=data(:,7:16+7-1); 

        EMG=EMG(:,EMGchannel);
        EMGabs=abs(EMG);
        EMG=rmnoise(EMGabs,2);
        TTL=data(:,end);
        TTLPosition=find(TTL>4);
        if isempty(TTLPosition)
            error('deletedRec wrong?')    
        else
            TTLPosition=TTLPosition(1);
        end
        
        %Normalize the torque in each diretion
        for direction=1:4
            if FM(end,direction)>0
                normFM(:,direction)=FM(:,direction)./Torq_max( (direction-1)*2+1 );
            else
                normFM(:,direction)=FM(:,direction)/Torq_max( direction*2 );
            end
        end
       
        if yjplot
            figure (1)
            plot(normFM)
            legend ('SF/E','SABD/ADD','SEXT,INT','EF/E')
            figure (2)
            plot(normFM(:,[2,4]))
            legend ('SABD/ADD','EF/E')
            xlabel('time (ms)')
            ylabel('Normalized Torque')
            pause
            clear normFM
        end
        
        
        
        % Normalize the torque during the holding phase in each direction
        TLevel(k,:)=mean(FM(end-200:end,:));
        for direction=1:4
            if TLevel(k,direction)>0
                TLevel(k,direction)=TLevel(k,direction)/Torq_max( (direction-1)*2+1 );
            else
                TLevel(k,direction)=TLevel(k,direction)/Torq_max( direction*2 );
            end
        end
        %  

        
        
        % calculate the torque Coupling ratio in each time point
        if fileBaseName(1)=='abd'
            primaryDir=2; otherDir=[1, 3, 4];
        elseif fileBaseName=='ef'
            primaryDir=2; otherDir=[1, 3, 4];
        end
        for direction=1:4
            if TLevel(k,direction)>0
                TLevel(k,direction)=TLevel(k,direction)/Torq_max( (direction-1)*2+1 );
            else
                TLevel(k,direction)=TLevel(k,direction)/Torq_max( direction*2 );
            end
        end
        %  


% calculate the rate of torque in each direction

% 		t=0:0.001:(m-1)*0.001; t=t';
%         for direction=1:4
%             ydata_tmp=FM(:,direction);
%             ydata_tmp=filtfilt(B,A,ydata_tmp);
%             ydata=ydata_tmp(1:end,:);
%             A1=max(ydata);
%             A2=min(ydata);
%             TRate(k,direction)=0;
%             if abs(A1-abs(A2))>0.5
%                 if A1>abs(A2)
%                     maxA=A1;
%                     positive=1;
%                 else
%                     maxA=A2;
%                     positive=0;
%                 end
%             
%                 
%                 if positive
%                     index=find((ydata)>0.5*(maxA));
%                     Y1=ydata(index(1));
%                     X1=index(1);
%                     index=find((ydata)>0.25*(maxA));
%                     X2=index(1);
%                     Y2=ydata(X2);
%                 else
%                     index=find(ydata<0.5*(maxA));
%                     Y1=ydata(index(1));
%                     X1=index(1);
%                     index=find((ydata)<0.25*(maxA));
%                     X2=index(1);
%                     Y2=ydata(X2);
%                    
%                 end
%                 if X1==X2
%                     figure
%                     plot(ydata)
%                     title(num2str(cur_trial))
%                     error('NO difference for 0.25 and 0.75 max') 
%                 else
%                     TRate(k,direction)=1000*(Y1-Y2)/(X1-X2);
%                 end
%                 clear index
%             end
%         end
% calculate the EMG leverl for each muscle
% 		
        EMGLevel(k,:)=mean(EMG(end-300:end,:))-mean(EMG(1:300,:));
        EMGLevel(k,:)=EMGLevel(k,:)./EMG_max(1:length(EMGLevel(k,:)));
                
        
        
% Calculate the MSI for each of the trial
        torqueStart=distance(i)+TTLPosition;
%         torqueStart=TTLPosition;

        EMGtmp=EMG(torqueStart+TIMETRIALSTART:torqueStart+TIMETRIALEND,:); %have not count the gain
        EMGtmp=EMGtmp.*repmat(filterGain',size(EMGtmp,1),1);
        EMG_env=filtfilt(B_EMG,A_EMG,EMGtmp);        
        EMG_baseline=mean(EMG_env(1500:2000,:));
        EMG_env=EMG_env-repmat(EMG_baseline,size(EMG_env,1),1);
        EMG_norm=EMG_env./repmat(EMG_max, size(EMG_env, 1), 1);


%         figure (200)
%         hold on
%         subplot(2,1,1)
%         plot(EMG_env)
%         subplot(2,1,2)
%         plot(EMG_norm)
%         legend ('1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16')
%         pause
%         clf
        
%         EMGall{k}=abs(EMGtmp);
        ind=find(EMG_norm<0);
        EMG_norm(ind)=0;
        thre=mean(std(EMG_norm(1:1500,:),0,1));
        focus_factor(:,k)=(EMG_focus_Smodel9(EMG_norm(2000:end,:),torqueDir75_45_90.torqueDir,PCSA,thre,0));
%         ind=find(EMG_env<0);
%         EMGtmp(ind)=0;
%         thre=mean(std(EMG_env(1:1500,:),0,1));
%         focus_factor1(1,k)=max(EMG_focus_Smodel9(EMG_env(2000:end,:),torqueDir75_45_90.torqueDir,PCSA,thre,0));

        k=k+1;
	end
end
MSI=mean(focus_factor,2);
stdMSI=std(focus_factor,0,2);
figure
hold on
plot(MSI)
plot(MSI+stdMSI,':')
plot(MSI-stdMSI,':')
% mean(focus_factor1)

save (outputfile_TL, 'TLevel','-ascii');
% save (outputfile_TR, 'TRate','-ascii');
save (outputfile_EMGL, 'EMGLevel','-ascii');
save (outputfile_MSI, 'focus_factor','-ascii');

figure
plot(TLevel)
legend('SF','ABD','EXT','EF')
title ('TLevel')

% figure
% plot(TRate)
% legend('SF','ABD','EXT','EF')
% title ('TRate')
% 
figure
plot(EMGLevel)
legend('1','2','3','4','5','6','7','8','9','10')
title ('EMGLevel')


